version: '3.8'

services:
  # React 前端應用 (生產環境)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: fullstack_client_prod
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - server
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost/api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`localhost`)"
      - "traefik.http.services.client.loadbalancer.server.port=80"

  # Node.js 後端 API (生產環境)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: fullstack_server_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-appdb}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # PostgreSQL 數據庫 (生產環境)
  postgres:
    image: postgres:15-alpine
    container_name: fullstack_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-appdb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-appdb}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Redis 緩存 (生產環境)
  redis:
    image: redis:7-alpine
    container_name: fullstack_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data_prod:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # Nginx 反向代理 (生產環境)
  nginx:
    image: nginx:1.25-alpine
    container_name: fullstack_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL 證書目錄
      - nginx_logs_prod:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - client
      - server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  # 日誌聚合 (可選)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: fullstack_fluentd_prod
    restart: unless-stopped
    volumes:
      - ./fluentd/conf:/fluentd/etc:ro
      - fluentd_logs_prod:/var/log/fluentd
    networks:
      - app-network
    ports:
      - "24224:24224"
    environment:
      - FLUENTD_CONF=fluent.conf
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    profiles:
      - logging

  # 監控 (可選)
  prometheus:
    image: prom/prometheus:latest
    container_name: fullstack_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - app-network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    profiles:
      - monitoring

  # Grafana 儀表板 (可選)
  grafana:
    image: grafana/grafana:latest
    container_name: fullstack_grafana_prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - app-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    profiles:
      - monitoring

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  nginx_logs_prod:
    driver: local
  fluentd_logs_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: fullstack-prod

# 生產環境配置說明:
# 1. 使用 docker-compose -f docker-compose.prod.yml up -d 啟動
# 2. 包含資源限制和健康檢查
# 3. 使用持久化卷存儲數據
# 4. 包含可選的監控和日誌服務
# 5. 啟用監控: docker-compose -f docker-compose.prod.yml --profile monitoring up -d
# 6. 啟用日誌: docker-compose -f docker-compose.prod.yml --profile logging up -d