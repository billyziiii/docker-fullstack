version: "3.8"

services:
  # 前端服務 (React)
  client:
    build: ./client
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - NODE_ENV=development
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    container_name: fullstack_client

  # 後端服務 (Node.js/Go)
  server:
    build: ./server
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    container_name: fullstack_server

  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: fullstack_postgres

  # Redis 緩存
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    container_name: fullstack_redis

  # Nginx 反向代理 (生產環境)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - server
    container_name: fullstack_nginx
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: fullstack_network