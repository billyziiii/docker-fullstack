version: "3.8"

services:
  # 前端服務 (React) - 開發模式
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development  # 使用開發階段
    ports:
      - "3000:3000"
    volumes:
      - ./client/src:/app/src:cached
      - ./client/public:/app/public:cached
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - server
    container_name: fullstack_client_dev
    stdin_open: true  # 支持交互式輸入
    tty: true         # 分配偽終端

  # 後端服務 (Node.js) - 開發模式
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development  # 使用開發階段
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      # 實時同步源代碼
      - ./server:/app
      # 排除 node_modules 避免衝突
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    container_name: fullstack_server_dev
    # 使用 nodemon 實現自動重啟
    command: npx nodemon server.js

  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: fullstack_postgres_dev

  # Redis 緩存
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    container_name: fullstack_redis_dev

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  default:
    name: fullstack_dev_network